C51 COMPILER V9.60.7.0   APP_RTC                                                           03/14/2025 22:01:09 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE APP_RTC
OBJECT MODULE PLACED IN .\list\APP_RTC.obj
COMPILER INVOKED BY: D:\mcu\Keil_v5\C51\BIN\C51.EXE ..\App\src\APP_RTC.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\D
                    -river\inc;..\User;..\App\inc) DEBUG PRINT(.\list\APP_RTC.lst) TABS(2) OBJECT(.\list\APP_RTC.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCAI.com ---------------------------------------------*/
   8          /* --- BBS: www.STCAIMCU.com  -----------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          #include  "APP.h"
  14          #include  "STC8H_RTC.h"
  15          #include  "STC8G_H_GPIO.h"
  16          #include  "STC8G_H_I2C.h"
  17          #include  "STC8G_H_NVIC.h"
  18          #include  "STC8G_H_UART.h"
  19          #include  "STC8G_H_Switch.h"
  20          
  21          /*************  功能说明  **************
  22          
  23          本例程基于STC8H8K64U为主控芯片的实验箱进行编写测试，STC8H系列带RTC模块的芯片可通用参考.
  24          
  25          读写芯片内部集成的RTC模块.
  26          
  27          用STC的MCU的IO方式驱动8位数码管。
  28          
  29          使用Timer0的16位自动重装来产生1ms节拍,程序运行于这个节拍下, 用户修改MCU主时钟频率时,自动定时于1ms.
  30          
  31          8位数码管显示时间(小时-分钟-秒).
  32          
  33          行列扫描按键键码为25~32.
  34          
  35          按键只支持单键按下, 不支持多键同时按下, 那样将会有不可预知的结果.
  36          
  37          键按下超过1秒后,将以10键/秒的速度提供重键输出. 用户只需要检测KeyCode是否非0来判断键是否按下.
  38          
  39          调整时间键:
  40          键码25: 小时+.
  41          键码26: 小时-.
  42          键码27: 分钟+.
  43          键码28: 分钟-.
  44          
  45          下载时, 选择时钟 24MHz (可以在配置文件"config.h"中修改).
  46          
  47          ******************************************/
  48          
  49          //========================================================================
  50          //                               本地常量声明 
  51          //========================================================================
  52          
  53          #define SleepModeSet  0        //0:不进休眠模式，使用数码管显示时不能进休眠; 1:使能休眠模式
  54          
C51 COMPILER V9.60.7.0   APP_RTC                                                           03/14/2025 22:01:09 PAGE 2   

  55          //========================================================================
  56          //                               本地变量声明
  57          //========================================================================
  58          
  59          
  60          //========================================================================
  61          //                               本地函数声明
  62          //========================================================================
  63          
  64          void IO_KeyScan(void);   //50ms call
  65          void DisplayRTC(void);
  66          void WriteRTC(void);
  67          
  68          //========================================================================
  69          //                            外部函数和变量声明
  70          //========================================================================
  71          
  72          extern bit B_1S;
  73          extern bit B_Alarm;
  74          
  75          //========================================================================
  76          // 函数: RTC_init
  77          // 描述: 用户初始化程序.
  78          // 参数: None.
  79          // 返回: None.
  80          // 版本: V1.0, 2020-09-25
  81          //========================================================================
  82          void RTC_init(void)
  83          {
  84   1        u8  i;
  85   1        RTC_InitTypeDef   RTC_InitStructure;
  86   1        COMx_InitDefine   COMx_InitStructure;         //结构定义
  87   1      
  88   1        RTC_InitStructure.RTC_Clock  = RTC_X32KCR;  //RTC 时钟, RTC_IRC32KCR, RTC_X32KCR
  89   1        RTC_InitStructure.RTC_Enable = ENABLE;      //I2C功能使能,   ENABLE, DISABLE
  90   1        RTC_InitStructure.RTC_Year   = 21;          //RTC 年, 00~99, 对应2000~2099年
  91   1        RTC_InitStructure.RTC_Month  = 12;          //RTC 月, 01~12
  92   1        RTC_InitStructure.RTC_Day    = 31;          //RTC 日, 01~31
  93   1        RTC_InitStructure.RTC_Hour   = 23;          //RTC 时, 00~23
  94   1        RTC_InitStructure.RTC_Min    = 59;          //RTC 分, 00~59
  95   1        RTC_InitStructure.RTC_Sec    = 55;          //RTC 秒, 00~59
  96   1        RTC_InitStructure.RTC_Ssec   = 00;          //RTC 1/128秒, 00~127
  97   1      
  98   1        RTC_InitStructure.RTC_ALAHour= 00;          //RTC 闹钟时, 00~23
  99   1        RTC_InitStructure.RTC_ALAMin = 00;          //RTC 闹钟分, 00~59
 100   1        RTC_InitStructure.RTC_ALASec = 00;          //RTC 闹钟秒, 00~59
 101   1        RTC_InitStructure.RTC_ALASsec= 00;          //RTC 闹钟1/128秒, 00~127
 102   1        RTC_Inilize(&RTC_InitStructure);
 103   1        NVIC_RTC_Init(RTC_ALARM_INT|RTC_SEC_INT,Priority_0);    //中断使能, RTC_ALARM_INT/RTC_DAY_INT/RTC_HOUR_INT/
             -RTC_MIN_INT/RTC_SEC_INT/RTC_SEC2_INT/RTC_SEC8_INT/RTC_SEC32_INT/DISABLE; 优先级(低到高) Priority_0,Priority_1,Priority_2
             -,Priority_3
 104   1      
 105   1        COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;   //模式,   UART_ShiftRight,UART_8bit_BRTx,UART_9bit,U
             -ART_9bit_BRTx
 106   1      //  COMx_InitStructure.UART_BRT_Use   = BRT_Timer2;     //选择波特率发生器, BRT_Timer2 (注意: 串口2固定使用BR
             -T_Timer2, 所以不用选择)
 107   1        COMx_InitStructure.UART_BaudRate  = 115200ul;     //波特率,     110 ~ 115200
 108   1        COMx_InitStructure.UART_RxEnable  = DISABLE;      //接收禁止,   ENABLE 或 DISABLE
 109   1        UART_Configuration(UART2, &COMx_InitStructure);   //初始化串口2 UART1,UART2,UART3,UART4
 110   1        NVIC_UART2_Init(ENABLE,Priority_1);   //中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0,Priority_1,Pri
             -ority_2,Priority_3
 111   1        
C51 COMPILER V9.60.7.0   APP_RTC                                                           03/14/2025 22:01:09 PAGE 3   

 112   1        P0_MODE_IO_PU(GPIO_Pin_All);    //P0 设置为准双向口
 113   1        P4_MODE_IO_PU(GPIO_Pin_6 | GPIO_Pin_7);   //P4.6,P4.7 设置为准双向口
 114   1        P6_MODE_IO_PU(GPIO_Pin_All);    //P6 设置为准双向口
 115   1        P7_MODE_IO_PU(GPIO_Pin_All);    //P7 设置为准双向口
 116   1        display_index = 0;
 117   1        
 118   1        for(i=0; i<8; i++)  LED8[i] = 0x10; //上电消隐
 119   1          
 120   1        KeyHoldCnt = 0; //键按下计时
 121   1        KeyCode = 0;    //给用户使用的键码
 122   1      
 123   1        IO_KeyState = 0;
 124   1        IO_KeyState1 = 0;
 125   1        IO_KeyHoldCnt = 0;
 126   1        cnt50ms = 0;
 127   1      
 128   1        printf("STC8H RTC Test!\r\n");
 129   1      }
 130          
 131          //========================================================================
 132          // 函数: Sample_RTC
 133          // 描述: 用户应用程序.
 134          // 参数: None.
 135          // 返回: None.
 136          // 版本: V1.0, 2020-09-25
 137          //========================================================================
 138          void Sample_RTC(void)
 139          {
 140   1        if(B_1S)
 141   1        {
 142   2          B_1S = 0;
 143   2          DisplayRTC();
 144   2          printf("Year=20%d,Month=%d,Day=%d,Hour=%d,Minute=%d,Second=%d\r\n",YEAR,MONTH,DAY,HOUR,MIN,SEC);
 145   2        }
 146   1      
 147   1        if(B_Alarm)
 148   1        {
 149   2          B_Alarm = 0;
 150   2          printf("RTC Alarm!\r\n");
 151   2        }
 152   1      
 153   1      #if(SleepModeSet == 1)
                  _nop_();
                  _nop_();
                  PD = 1;  //STC32G 芯片使用内部32K时钟，休眠无法唤醒
                  _nop_();
                  _nop_();
                  _nop_();
                  _nop_();
                  _nop_();
                  _nop_();
              #else
 164   1        DisplayScan();
 165   1        
 166   1        if(++cnt50ms >= 50)     //50ms扫描一次行列键盘
 167   1        {
 168   2          cnt50ms = 0;
 169   2          IO_KeyScan();
 170   2        }
 171   1        
 172   1        if(KeyCode != 0)        //有键按下
 173   1        {
C51 COMPILER V9.60.7.0   APP_RTC                                                           03/14/2025 22:01:09 PAGE 4   

 174   2          if(KeyCode == 25)   //hour +1
 175   2          {
 176   3            if(++hour >= 24)    hour = 0;
 177   3            WriteRTC();
 178   3            DisplayRTC();
 179   3          }
 180   2          if(KeyCode == 26)   //hour -1
 181   2          {
 182   3            if(--hour >= 24)    hour = 23;
 183   3            WriteRTC();
 184   3            DisplayRTC();
 185   3          }
 186   2          if(KeyCode == 27)   //minute +1
 187   2          {
 188   3            second = 0;
 189   3            if(++minute >= 60)  minute = 0;
 190   3            WriteRTC();
 191   3            DisplayRTC();
 192   3          }
 193   2          if(KeyCode == 28)   //minute -1
 194   2          {
 195   3            second = 0;
 196   3            if(--minute >= 60)  minute = 59;
 197   3            WriteRTC();
 198   3            DisplayRTC();
 199   3          }
 200   2      
 201   2          KeyCode = 0;
 202   2        }
 203   1      #endif
 204   1      }
 205          
 206          //========================================================================
 207          // 函数: DisplayRTC
 208          // 描述: 显示时钟函数.
 209          // 参数: None.
 210          // 返回: None.
 211          // 版本: V1.0, 2020-09-25
 212          //========================================================================
 213          void DisplayRTC(void)
 214          {
 215   1          hour = HOUR;
 216   1          minute = MIN;
 217   1      
 218   1          if(HOUR >= 10)  LED8[0] = HOUR / 10;
 219   1          else            LED8[0] = DIS_BLACK;
 220   1          LED8[1] = HOUR % 10;
 221   1          LED8[2] = DIS_;
 222   1          LED8[3] = MIN / 10;
 223   1          LED8[4] = MIN % 10;
 224   1          LED8[5] = DIS_;
 225   1          LED8[6] = SEC / 10;
 226   1          LED8[7] = SEC % 10;
 227   1      }
 228          
 229          
 230          //========================================================================
 231          // 函数: WriteRTC
 232          // 描述: 写RTC函数.
 233          // 参数: None.
 234          // 返回: None.
 235          // 版本: V1.0, 2020-09-25
C51 COMPILER V9.60.7.0   APP_RTC                                                           03/14/2025 22:01:09 PAGE 5   

 236          //========================================================================
 237          void WriteRTC(void)
 238          {
 239   1          INIYEAR = YEAR;   //继承当前年月日
 240   1          INIMONTH = MONTH;
 241   1          INIDAY = DAY;
 242   1      
 243   1          INIHOUR = hour;   //修改时分秒
 244   1          INIMIN = minute;
 245   1          INISEC = 0;
 246   1          INISSEC = 0;
 247   1          RTCCFG |= 0x01;   //触发RTC寄存器初始化
 248   1      }
 249          
 250          
 251          /*****************************************************
 252              行列键扫描程序
 253              使用XY查找4x4键的方法，只能单键，速度快
 254          
 255             Y     P04      P05      P06      P07
 256                    |        |        |        |
 257          X         |        |        |        |
 258          P00 ---- K00 ---- K01 ---- K02 ---- K03 ----
 259                    |        |        |        |
 260          P01 ---- K04 ---- K05 ---- K06 ---- K07 ----
 261                    |        |        |        |
 262          P02 ---- K08 ---- K09 ---- K10 ---- K11 ----
 263                    |        |        |        |
 264          P03 ---- K12 ---- K13 ---- K14 ---- K15 ----
 265                    |        |        |        |
 266          ******************************************************/
 267          
 268          
 269          //========================================================================
 270          // 函数: IO_KeyDelay
 271          // 描述: 按键扫描延迟程序.
 272          // 参数: None.
 273          // 返回: None.
 274          // 版本: V1.0, 2020-09-25
 275          //========================================================================
 276          void IO_KeyDelay(void)
 277          {
 278   1          u8 i;
 279   1          i = 60;
 280   1          while(--i)  ;
 281   1      }
 282          
 283          //========================================================================
 284          // 函数: IO_KeyScan
 285          // 描述: 按键扫描程序.
 286          // 参数: None.
 287          // 返回: None.
 288          // 版本: V1.0, 2020-09-25
 289          //========================================================================
 290          void IO_KeyScan(void)    //50ms call
 291          {
 292   1          u8  j;
 293   1      
 294   1          j = IO_KeyState1;   //保存上一次状态
 295   1      
 296   1          P0 = 0xf0;  //X低，读Y
 297   1          IO_KeyDelay();
C51 COMPILER V9.60.7.0   APP_RTC                                                           03/14/2025 22:01:09 PAGE 6   

 298   1          IO_KeyState1 = P0 & 0xf0;
 299   1      
 300   1          P0 = 0x0f;  //Y低，读X
 301   1          IO_KeyDelay();
 302   1          IO_KeyState1 |= (P0 & 0x0f);
 303   1          IO_KeyState1 ^= 0xff;   //取反
 304   1          
 305   1          if(j == IO_KeyState1)   //连续两次读相等
 306   1          {
 307   2              j = IO_KeyState;
 308   2              IO_KeyState = IO_KeyState1;
 309   2              if(IO_KeyState != 0)    //有键按下
 310   2              {
 311   3                  F0 = 0;
 312   3                  if(j == 0)  F0 = 1; //第一次按下
 313   3                  else if(j == IO_KeyState)
 314   3                  {
 315   4                      if(++IO_KeyHoldCnt >= 20)   //1秒后重键
 316   4                      {
 317   5                          IO_KeyHoldCnt = 18;
 318   5                          F0 = 1;
 319   5                      }
 320   4                  }
 321   3                  if(F0)
 322   3                  {
 323   4                      j = T_KeyTable[IO_KeyState >> 4];
 324   4                      if((j != 0) && (T_KeyTable[IO_KeyState& 0x0f] != 0)) 
 325   4                          KeyCode = (j - 1) * 4 + T_KeyTable[IO_KeyState & 0x0f] + 16;    //计算键码，17~32
 326   4                  }
 327   3              }
 328   2              else    IO_KeyHoldCnt = 0;
 329   2          }
 330   1          P0 = 0xff;
 331   1      }
 332          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    711    ----
   CONSTANT SIZE    =     87    ----
   XDATA SIZE       =   ----      22
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
