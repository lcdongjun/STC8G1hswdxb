C51 COMPILER V9.60.7.0   STC8G_PCA                                                         03/14/2025 22:01:11 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE STC8G_PCA
OBJECT MODULE PLACED IN .\list\STC8G_PCA.obj
COMPILER INVOKED BY: D:\mcu\Keil_v5\C51\BIN\C51.EXE ..\Driver\src\STC8G_PCA.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR
                    -(..\Driver\inc;..\User;..\App\inc) DEBUG PRINT(.\list\STC8G_PCA.lst) TABS(2) OBJECT(.\list\STC8G_PCA.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCAI.com ---------------------------------------------*/
   8          /* --- BBS: www.STCAIMCU.com  -----------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          #include  "STC8G_PCA.h"
  14          
  15          bit   B_Capture0,B_Capture1,B_Capture2;
  16          u8    PCA0_mode,PCA1_mode,PCA2_mode;
  17          u16   CCAP0_tmp,PCA_Timer0;
  18          u16   CCAP1_tmp,PCA_Timer1;
  19          u16   CCAP2_tmp,PCA_Timer2;
  20          
  21          //========================================================================
  22          // 函数: UpdatePcaPwm(u8 PCA_id, u16 pwm_value)
  23          // 描述: 更新PWM值. 
  24          // 参数: PCA_id: PCA序号. 取值 PCA0,PCA1,PCA2,PCA_Counter
  25          //     pwm_value: pwm值, 这个值是输出低电平的时间.
  26          // 返回: none.
  27          // 版本: V1.0, 2012-11-22
  28          //========================================================================
  29          void  UpdatePcaPwm(u8 PCA_id, u16 pwm_value)
  30          {
  31   1        if(PCA_id == PCA0)
  32   1        {
  33   2          PCA_PWM0 = (PCA_PWM0 & ~0x32) | (u8)((pwm_value & 0x0300) >> 4) | (u8)((pwm_value & 0x0400) >> 9);
  34   2          CCAP0H = (u8)pwm_value;
  35   2        }
  36   1        else if(PCA_id == PCA1)
  37   1        {
  38   2          PCA_PWM1 = (PCA_PWM1 & ~0x32) | (u8)((pwm_value & 0x0300) >> 4) | (u8)((pwm_value & 0x0400) >> 9);
  39   2          CCAP1H = (u8)pwm_value;
  40   2        }
  41   1        else if(PCA_id == PCA2)
  42   1        {
  43   2          PCA_PWM2 = (PCA_PWM2 & ~0x32) | (u8)((pwm_value & 0x0300) >> 4) | (u8)((pwm_value & 0x0400) >> 9);
  44   2          CCAP2H = (u8)pwm_value;
  45   2        }
  46   1      }
  47          
  48          //========================================================================
  49          // 函数: void PCA_Init(PCA_id, PCA_InitTypeDef *PCAx)
  50          // 描述: PCA初始化程序.
  51          // 参数: PCA_id: PCA序号. 取值 PCA0,PCA1,PCA2,PCA_Counter
  52          //     PCAx: 结构参数,请参考PCA.h里的定义.
  53          // 返回: none.
  54          // 版本: V1.0, 2012-11-22
C51 COMPILER V9.60.7.0   STC8G_PCA                                                         03/14/2025 22:01:11 PAGE 2   

  55          //========================================================================
  56          void  PCA_Init(u8 PCA_id, PCA_InitTypeDef *PCAx)
  57          {
  58   1        if(PCA_id > PCA_Counter)  return;   //id错误
  59   1      
  60   1        if(PCA_id == PCA_Counter)     //设置公用Counter
  61   1        {
  62   2          CR = 0;
  63   2          CH = 0;
  64   2          CL = 0;
  65   2          CMOD  = (CMOD  & ~(7<<1)) | PCAx->PCA_Clock;      //选择时钟源
  66   2          if(PCAx->PCA_RUN == ENABLE) CR = 1;
  67   2          return;
  68   2        }
  69   1      
  70   1        if(PCA_id == PCA0)
  71   1        {
  72   2          PCA_PWM0  = (PCA_PWM0 & ~(3<<6)) | PCAx->PCA_PWM_Wide;  //PWM宽度
  73   2      
  74   2          PCA_Timer0 = PCAx->PCA_Value;
  75   2          B_Capture0 = 0;
  76   2          CCAP0_tmp = PCA_Timer0;
  77   2          CCAP0L = (u8)CCAP0_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
  78   2          CCAP0H = (u8)(CCAP0_tmp >> 8);  //后写CCAP0H
  79   2        }
  80   1        if(PCA_id == PCA1)
  81   1        {
  82   2          PCA_PWM1  = (PCA_PWM1 & ~(3<<6)) | PCAx->PCA_PWM_Wide;
  83   2      
  84   2          PCA_Timer1 = PCAx->PCA_Value;
  85   2          B_Capture1 = 0;
  86   2          CCAP1_tmp = PCA_Timer1;
  87   2          CCAP1L = (u8)CCAP1_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
  88   2          CCAP1H = (u8)(CCAP1_tmp >> 8);  //后写CCAP0H
  89   2        }
  90   1        if(PCA_id == PCA2)
  91   1        {
  92   2          PCA_PWM2  = (PCA_PWM2 & ~(3<<6)) | PCAx->PCA_PWM_Wide;
  93   2      
  94   2          PCA_Timer2 = PCAx->PCA_Value;
  95   2          B_Capture2 = 0;
  96   2          CCAP2_tmp = PCA_Timer2;
  97   2          CCAP2L = (u8)CCAP2_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
  98   2          CCAP2H = (u8)(CCAP2_tmp >> 8);  //后写CCAP0H
  99   2        }
 100   1      }
 101          
 102          //========================================================================
 103          // 函数: NVIC_PCA_Init
 104          // 描述: PCA嵌套向量中断控制器初始化.
 105          // 参数: Channel:  通道, PCA0/PCA1/PCA2/PCA_Counter.
 106          // 参数: State:    中断使能状态, PCA_ECOM/PCA_CCAPP/PCA_CCAPN/PCA_MAT/PCA_TOG/PCA_PWM/PCA_ECCF/DISABLE.
 107          // 参数: Priority: 中断优先级, Priority_0,Priority_1,Priority_2,Priority_3.
 108          // 返回: 执行结果 SUCCESS/FAIL.
 109          // 版本: V1.0, 2020-09-29
 110          //========================================================================
 111          u8 NVIC_PCA_Init(u8 Channel, u8 State, u8 Priority)
 112          {
 113   1      //  if(Channel > PCA_Counter) return FAIL;
 114   1        if(Priority > Priority_3) return FAIL;
 115   1        PCA_Priority(Priority);
 116   1        switch(Channel)
C51 COMPILER V9.60.7.0   STC8G_PCA                                                         03/14/2025 22:01:11 PAGE 3   

 117   1        {
 118   2          case PCA0:
 119   2            CCAPM0 = State;
 120   2          break;
 121   2      
 122   2          case PCA1:
 123   2            CCAPM1 = State;
 124   2          break;
 125   2      
 126   2          case PCA2:
 127   2            CCAPM2 = State;
 128   2          break;
 129   2      
 130   2          case PCA_Counter:
 131   2            CMOD = (CMOD  & ~1) | (State & 1);
 132   2          break;
 133   2        }
 134   1        return SUCCESS;
 135   1      }
 136          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    407    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     15    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
