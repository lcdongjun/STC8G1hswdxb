C51 COMPILER V9.60.7.0   APP_I2C_PS                                                        03/14/2025 22:01:10 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE APP_I2C_PS
OBJECT MODULE PLACED IN .\list\APP_I2C_PS.obj
COMPILER INVOKED BY: D:\mcu\Keil_v5\C51\BIN\C51.EXE ..\App\src\APP_I2C_PS.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.
                    -.\Driver\inc;..\User;..\App\inc) DEBUG PRINT(.\list\APP_I2C_PS.lst) TABS(2) OBJECT(.\list\APP_I2C_PS.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCAI.com ---------------------------------------------*/
   8          /* --- BBS: www.STCAIMCU.com  -----------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          #include  "APP.h"
  14          #include  "STC8G_H_GPIO.h"
  15          #include  "STC8G_H_I2C.h"
  16          #include  "STC8G_H_Soft_I2C.h"
  17          #include  "STC8G_H_UART.h"
  18          #include  "STC8G_H_NVIC.h"
  19          #include  "STC8G_H_Switch.h"
  20          
  21          /*************  功能说明  **************
  22          
  23          本例程基于STC8H8K64U为主控芯片的开天斧核心板进行编写测试，STC8G、STC8H系列芯片可通用参考.
  24          
  25          内部集成I2C串行总线控制器做从机模式，SCL->P2.5, SDA->P2.4;
  26          IO口模拟I2C做主机模式，SCL->P0.0, SDA->P0.1;
  27          通过外部飞线连接 P0.0->P2.5, P0.1->P2.4，实现I2C自发自收功能。
  28          
  29          使用Timer0的16位自动重装来产生1ms节拍,程序运行于这个节拍下,用户修改MCU主时钟频率时,自动定时于1ms.
  30          计数器每秒钟加1, 计数范围为0~199.
  31          
  32          上电后主机每秒钟发送一次计数数据，串口打印发送内容；从机接收到数据后通过串口打印接收结果。
  33          
  34          需要在"STC8G_H_UART.h"里设置： #define  PRINTF_SELECT  UART1
  35          
  36          下载时, 选择时钟 24MHz (可以在配置文件"config.h"中修改).
  37          
  38          ******************************************/
  39          
  40          //========================================================================
  41          //                               本地常量声明 
  42          //========================================================================
  43          
  44          
  45          //========================================================================
  46          //                               本地变量声明
  47          //========================================================================
  48          
  49          u8  temp[4];     //通用数组
  50          
  51          //========================================================================
  52          //                               本地函数声明
  53          //========================================================================
  54          
C51 COMPILER V9.60.7.0   APP_I2C_PS                                                        03/14/2025 22:01:10 PAGE 2   

  55          
  56          //========================================================================
  57          //                            外部函数和变量声明
  58          //========================================================================
  59          
  60          
  61          //========================================================================
  62          // 函数: I2C_PS_init
  63          // 描述: 用户初始化程序.
  64          // 参数: None.
  65          // 返回: None.
  66          // 版本: V1.0, 2020-09-25
  67          //========================================================================
  68          void I2C_PS_init(void)
  69          {
  70   1        I2C_InitTypeDef   I2C_InitStructure;
  71   1        COMx_InitDefine   COMx_InitStructure;         //结构定义
  72   1      
  73   1        P0_MODE_IO_PU(GPIO_Pin_0 | GPIO_Pin_1);   //P0.0,P0.1 设置为准双向口
  74   1        P2_MODE_IO_PU(GPIO_Pin_4 | GPIO_Pin_5);   //P2.4,P2.5 设置为准双向口
  75   1        P3_MODE_IO_PU(GPIO_Pin_0 | GPIO_Pin_1);   //P3.0,P3.1 设置为准双向口
  76   1        I2C_SW(I2C_P24_P25);          //I2C_P14_P15,I2C_P24_P25,I2C_P33_P32
  77   1        UART1_SW(UART1_SW_P30_P31);   //UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P43_P44
  78   1      
  79   1        I2C_InitStructure.I2C_Mode      = I2C_Mode_Slave;   //主从选择   I2C_Mode_Master, I2C_Mode_Slave
  80   1        I2C_InitStructure.I2C_Enable    = ENABLE;           //I2C功能使能,   ENABLE, DISABLE
  81   1        I2C_InitStructure.I2C_SL_MA     = ENABLE;           //使能从机地址比较功能,   ENABLE, DISABLE
  82   1        I2C_InitStructure.I2C_SL_ADR    = 0x2d;             //从机设备地址,  0~127  (0x2d<<1 = 0x5a)
  83   1        I2C_Init(&I2C_InitStructure);
  84   1        NVIC_I2C_Init(I2C_Mode_Slave,I2C_ESTAI|I2C_ERXI|I2C_ETXI|I2C_ESTOI,Priority_0); //主从模式, I2C_Mode_Mast
             -er, I2C_Mode_Slave; 中断使能, I2C_ESTAI/I2C_ERXI/I2C_ETXI/I2C_ESTOI/DISABLE; 优先级(低到高) Priority_0,Priority_1,Priori
             -ty_2,Priority_3
  85   1      
  86   1        COMx_InitStructure.UART_Mode      = UART_8bit_BRTx; //模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART
             -_9bit_BRTx
  87   1        COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;     //选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意: 串口2
             -固定使用BRT_Timer2)
  88   1        COMx_InitStructure.UART_BaudRate  = 115200ul;     //波特率, 一般 110 ~ 115200
  89   1        COMx_InitStructure.UART_RxEnable  = ENABLE;       //接收允许,   ENABLE或DISABLE
  90   1        COMx_InitStructure.BaudRateDouble = DISABLE;      //波特率加倍, ENABLE或DISABLE
  91   1        UART_Configuration(UART1, &COMx_InitStructure);   //初始化串口1 UART1,UART2,UART3,UART4
  92   1        NVIC_UART1_Init(ENABLE,Priority_1);   //中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0,Priority_1,Pri
             -ority_2,Priority_3
  93   1      
  94   1        DisplayFlag = 0;
  95   1        second = 0;
  96   1      }
  97          
  98          //========================================================================
  99          // 函数: Sample_I2C_PS
 100          // 描述: 用户应用程序.
 101          // 参数: None.
 102          // 返回: None.
 103          // 版本: V1.0, 2020-09-25
 104          //========================================================================
 105          void Sample_I2C_PS(void)
 106          {
 107   1          DisplayScan();
 108   1      
 109   1          if(DisplayFlag)
 110   1          {
 111   2              DisplayFlag = 0;
C51 COMPILER V9.60.7.0   APP_I2C_PS                                                        03/14/2025 22:01:10 PAGE 3   

 112   2              printf("I2C Read: %bd%bd%bd%bd\r\n",I2C_Buffer[0],I2C_Buffer[1],I2C_Buffer[2],I2C_Buffer[3]);
 113   2          }
 114   1      
 115   1          if(++msecond >= 1000)   //1秒到
 116   1          {
 117   2              msecond = 0;        //清1000ms计数
 118   2              second++;         //秒计数+1
 119   2              if(second >= 200)    second = 0;   //秒计数范围为0~199
 120   2      
 121   2              printf("SI2C Send: %04bu\r\n",second);
 122   2              temp[0] = second / 1000;
 123   2              temp[1] = (second % 1000) / 100;
 124   2              temp[2] = (second % 100) / 10;
 125   2              temp[3] = second % 10;
 126   2      
 127   2              SI2C_WriteNbyte(SLAW, 0, temp, 4);
 128   2          }
 129   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    324    ----
   CONSTANT SIZE    =     44    ----
   XDATA SIZE       =      4      15
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
