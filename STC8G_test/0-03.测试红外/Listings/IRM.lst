C51 COMPILER V9.60.7.0   IRM                                                               03/17/2025 23:50:48 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE IRM
OBJECT MODULE PLACED IN .\Objects\IRM.obj
COMPILER INVOKED BY: D:\mcu\Keil_v5\C51\BIN\C51.EXE bsp\1838\IRM.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\main;.\system;.\bsp
                    -\1838) DEBUG OBJECTEXTEND PRINT(.\Listings\IRM.lst) TABS(2) OBJECT(.\Objects\IRM.obj)

line level    source

   1          #include "IRM.h"
   2          
   3          
   4          #define TIMER_SCALE (FOSC / 1000000) // 1us 计时
   5          
   6          volatile unsigned char ir_data[4];  // 存储 4 字节红外数据
   7          volatile bit ir_flag = 0;           // 数据接收完成标志
   8          volatile unsigned char bit_count = 0; // 已接收位数
   9          
  10          void delay_us(unsigned int us) {
  11   1          while (us--) {
  12   2              _nop_(); _nop_(); _nop_(); _nop_();  // 简单延时
  13   2          }
  14   1      }
  15          
  16          void Timer0_Init() {
  17   1      //    TMOD &= 0xF0; // 清空T0模式
  18   1      //    TMOD |= 0x01; // T0 16位计数
  19   1          TMOD = 0x08; 
  20   1          TH0 = TL0 = 0; // 清零
  21   1          TR0 = 1; // 启动T0
  22   1      }
  23          
  24          void EXTI0_Init() {
  25   1          IT0 = 1; // 下降沿触发
  26   1          EX0 = 1; // 允许外部中断0
  27   1          EA = 1;  // 开总中断
  28   1      }
  29          
  30          void Timer0_Reset() {
  31   1          TH0 = 0;
  32   1          TL0 = 0;
  33   1          TR0 = 1;  // 启动定时器
  34   1      }
  35          
  36          unsigned int Timer0_Read() {
  37   1          TR0 = 0; // 先停止计时
  38   1          return (TH0 << 8) | TL0;  // 获取定时器值
  39   1      }
  40          
  41          // **外部中断 0 处理函数**
  42          void exint0() interrupt 0 {
  43   1          unsigned int time = Timer0_Read();
  44   1          Timer0_Reset();  // 重置定时器
  45   1          if (time > 8500 && time < 9500) {  // 9ms 低电平 (起始信号)
  46   2              bit_count = 0;
  47   2          } 
  48   1          else if (time > 4000 && time < 5000) {  // 4.5ms 高电平 (起始信号)
  49   2              bit_count = 0;
  50   2          } 
  51   1          else if (time > 400 && time < 700) {  // 560μs 低电平（数据位）
  52   2              // 等待高电平
  53   2          } 
  54   1          else if (time > 400 && time < 700) {  // 560μs 高电平（数据 0）
C51 COMPILER V9.60.7.0   IRM                                                               03/17/2025 23:50:48 PAGE 2   

  55   2              ir_data[bit_count / 8] <<= 1;
  56   2              bit_count++;
  57   2          } 
  58   1          else if (time > 1500 && time < 1800) {  // 1.69ms 高电平（数据 1）
  59   2              ir_data[bit_count / 8] <<= 1;
  60   2              ir_data[bit_count / 8] |= 1;
  61   2              bit_count++;
  62   2          }
  63   1          else
  64   1          {
  65   2            printf("time: %ld\r\n",time);
  66   2          }
  67   1      
  68   1          if (bit_count >= 32) {  // 接收完32位数据
  69   2              bit_count = 0;
  70   2              ir_flag = 1;
  71   2          }
  72   1      }
  73          
  74          void irm_init(void)
  75          {
  76   1          Timer0_Init();
  77   1          EXTI0_Init();
  78   1      
  79   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    294    ----
   CONSTANT SIZE    =     12    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
